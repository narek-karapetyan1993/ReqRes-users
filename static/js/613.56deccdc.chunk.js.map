{"version":3,"file":"static/js/613.56deccdc.chunk.js","mappings":"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","sources":["webpack://reqres-users/./src/pages/Register/Register.module.scss?d3b3","pages/Register/Register.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Register_wrapper__TLsii\",\"formBlock\":\"Register_formBlock__yBRxY\",\"heading\":\"Register_heading__bM8R8\",\"formGroup\":\"Register_formGroup__QE24r\",\"formInput\":\"Register_formInput__zBOWs\",\"error\":\"Register_error__Y+-60\",\"showHide\":\"Register_showHide__BpM3r\",\"btn\":\"Register_btn__s4RJr\"};","import { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { selectAuth, setMeData } from \"features/auth/authSlice\";\nimport { userRegister } from \"features/auth/authThunk\";\nimport { EIcons } from \"helpers/enumeration\";\nimport { Icon } from \"helpers/Icon\";\nimport React, { useEffect, useState } from \"react\";\nimport { FieldValues, useForm } from \"react-hook-form\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport styles from \"./Register.module.scss\";\n\nexport default function Register() {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const [passType, setPassType] = useState(true);\n  const [confirmType, setConfirmType] = useState(true);\n\n  const { token, status } = useAppSelector(selectAuth);\n\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n  } = useForm({\n    mode: \"onBlur\",\n  });\n\n  useEffect(() => {\n    if (token.token !== \"\" && status === \"succeeded\") {\n      navigate(\"/ReqRes-users/users\");\n    }\n  }, [navigate, token, status]);\n\n  function submitForm(data: FieldValues) {\n    const { confirmPassword, ...meData } = data;\n\n    dispatch(setMeData(meData));\n    localStorage.setItem(\"meData\", JSON.stringify(meData));\n\n    const { username, ...meAuthData } = data;\n\n    dispatch(userRegister(meAuthData));\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.formBlock}>\n        <h2 className={styles.heading}>Регистрация</h2>\n\n        <form onSubmit={handleSubmit(submitForm)}>\n          <div className={styles.formGroup}>\n            <label htmlFor=\"username\">Имя</label>\n            <input\n              type=\"text\"\n              className={styles.formInput}\n              style={\n                errors.username\n                  ? { border: \"1px solid red\" }\n                  : { border: \"1px solid transparent\" }\n              }\n              {...register(\"username\", {\n                required: \"Обязательное поле\",\n                minLength: 2,\n                maxLength: 20,\n                validate: {\n                  matchesTwoSymbol: (value) => {\n                    const { username } = getValues();\n                    return username === value || \"Минимум 2 буквы!\";\n                  },\n                },\n              })}\n            />\n            {errors.username && (\n              <p className={styles.error}>{errors.username.message}</p>\n            )}\n          </div>\n          <div className={styles.formGroup}>\n            <label htmlFor=\"email\">Электронная почта</label>\n            <input\n              style={\n                errors.email\n                  ? { border: \"1px solid red\" }\n                  : { border: \"1px solid transparent\" }\n              }\n              type=\"email\"\n              className={styles.formInput}\n              {...register(\"email\", {\n                required: \"Обязательное поле\",\n                pattern: /[a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+/,\n              })}\n            />\n            {errors.email && (\n              <p className={styles.error}>{errors.email.message}</p>\n            )}\n          </div>\n          <div className={styles.formGroup}>\n            <label htmlFor=\"password\">Пароль</label>\n            <input\n              style={\n                errors.password\n                  ? { border: \"1px solid red\" }\n                  : { border: \"1px solid transparent\" }\n              }\n              type={passType ? \"password\" : \"text\"}\n              className={styles.formInput}\n              {...register(\"password\", {\n                required: \"Пароль обязателен\",\n                minLength: 6,\n              })}\n            />\n            {errors.password && (\n              <p className={styles.error}>{errors.password.message}</p>\n            )}\n            <button\n              className={styles.showHide}\n              type=\"button\"\n              onClick={() => setPassType(!passType)}\n            >\n              {passType ? (\n                <Icon name={EIcons.hidePass} />\n              ) : (\n                <Icon name={EIcons.showPass} />\n              )}\n            </button>\n          </div>\n\n          <div className={styles.formGroup}>\n            <label htmlFor=\"confirmPassword\">Подтвердите пароль</label>\n            <input\n              style={\n                errors.confirmPassword\n                  ? { border: \"1px solid red\" }\n                  : { border: \"1px solid transparent\" }\n              }\n              type={confirmType ? \"password\" : \"text\"}\n              className={styles.formInput}\n              {...register(\"confirmPassword\", {\n                required: \"Пожалуйста подтвердите пароль\",\n                validate: {\n                  matchesPreviousPassword: (value) => {\n                    const { password } = getValues();\n                    return password === value || \"Пароли должны совпасть!\";\n                  },\n                },\n\n                minLength: 6,\n              })}\n            />\n            {errors.confirmPassword && (\n              <p className={styles.error}>{errors.confirmPassword.message}</p>\n            )}\n            <button\n              className={styles.showHide}\n              type=\"button\"\n              onClick={() => setConfirmType(!confirmType)}\n            >\n              {confirmType ? (\n                <Icon name={EIcons.hidePass} />\n              ) : (\n                <Icon name={EIcons.showPass} />\n              )}\n            </button>\n          </div>\n          <button type=\"submit\" className={styles.btn}>\n            Зарегистрироваться\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n"],"names":["Register","dispatch","useAppDispatch","navigate","useNavigate","useState","passType","setPassType","confirmType","setConfirmType","useAppSelector","selectAuth","token","status","useForm","mode","register","handleSubmit","getValues","errors","formState","useEffect","className","styles","onSubmit","data","confirmPassword","meData","setMeData","localStorage","setItem","JSON","stringify","username","meAuthData","userRegister","htmlFor","type","style","border","required","minLength","maxLength","validate","matchesTwoSymbol","value","message","email","pattern","password","onClick","Icon","name","EIcons","matchesPreviousPassword"],"sourceRoot":""}