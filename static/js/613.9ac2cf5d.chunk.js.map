{"version":3,"file":"static/js/613.9ac2cf5d.chunk.js","mappings":"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","sources":["webpack://reqres-users/./src/pages/Register/Register.module.scss?d3b3","pages/Register/Register.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Register_wrapper__TLsii\",\"formBlock\":\"Register_formBlock__yBRxY\",\"heading\":\"Register_heading__bM8R8\",\"formGroup\":\"Register_formGroup__QE24r\",\"formInput\":\"Register_formInput__zBOWs\",\"error\":\"Register_error__Y+-60\",\"showHide\":\"Register_showHide__BpM3r\",\"btn\":\"Register_btn__s4RJr\"};","import { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { selectAuth, setMeData } from \"features/auth/authSlice\";\nimport { userRegister } from \"features/auth/authThunk\";\nimport { EIcons } from \"helpers/enumeration\";\nimport { Icon } from \"helpers/Icon\";\nimport React, { useEffect, useState } from \"react\";\nimport { FieldValues, useForm } from \"react-hook-form\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport styles from \"./Register.module.scss\";\n\nexport default function Register() {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const [passType, setPassType] = useState(true);\n  const [confirmType, setConfirmType] = useState(true);\n\n  const { token, status } = useAppSelector(selectAuth);\n\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n  } = useForm({\n    mode: \"onBlur\",\n  });\n\n  useEffect(() => {\n    if (token.token !== \"\" && status === \"succeeded\") {\n      navigate(\"/users\");\n    }\n  }, [navigate, token, status]);\n\n  function submitForm(data: FieldValues) {\n    const { confirmPassword, ...meData } = data;\n\n    dispatch(setMeData(meData));\n    localStorage.setItem(\"meData\", JSON.stringify(meData));\n\n    const { username, ...meAuthData } = data;\n\n    dispatch(userRegister(meAuthData));\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.formBlock}>\n        <h2 className={styles.heading}>Регистрация</h2>\n\n        <form onSubmit={handleSubmit(submitForm)}>\n          <div className={styles.formGroup}>\n            <label htmlFor=\"username\">Имя</label>\n            <input\n              type=\"text\"\n              className={styles.formInput}\n              style={\n                errors.username\n                  ? { border: \"1px solid red\" }\n                  : { border: \"1px solid transparent\" }\n              }\n              {...register(\"username\", {\n                required: \"Обязательное поле\",\n                minLength: 2,\n                maxLength: 20,\n                validate: {\n                  matchesTwoSymbol: (value) => {\n                    const { username } = getValues();\n                    return username === value || \"Минимум 2 буквы!\";\n                  },\n                },\n              })}\n            />\n            {errors.username && (\n              <p className={styles.error}>{errors.username.message}</p>\n            )}\n          </div>\n          <div className={styles.formGroup}>\n            <label htmlFor=\"email\">Электронная почта</label>\n            <input\n              style={\n                errors.email\n                  ? { border: \"1px solid red\" }\n                  : { border: \"1px solid transparent\" }\n              }\n              type=\"email\"\n              className={styles.formInput}\n              {...register(\"email\", {\n                required: \"Обязательное поле\",\n                pattern: /[a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+/,\n              })}\n            />\n            {errors.email && (\n              <p className={styles.error}>{errors.email.message}</p>\n            )}\n          </div>\n          <div className={styles.formGroup}>\n            <label htmlFor=\"password\">Пароль</label>\n            <input\n              style={\n                errors.password\n                  ? { border: \"1px solid red\" }\n                  : { border: \"1px solid transparent\" }\n              }\n              type={passType ? \"password\" : \"text\"}\n              className={styles.formInput}\n              {...register(\"password\", {\n                required: \"Пароль обязателен\",\n                minLength: 6,\n              })}\n            />\n            {errors.password && (\n              <p className={styles.error}>{errors.password.message}</p>\n            )}\n            <button\n              className={styles.showHide}\n              type=\"button\"\n              onClick={() => setPassType(!passType)}\n            >\n              {passType ? (\n                <Icon name={EIcons.hidePass} />\n              ) : (\n                <Icon name={EIcons.showPass} />\n              )}\n            </button>\n          </div>\n\n          <div className={styles.formGroup}>\n            <label htmlFor=\"confirmPassword\">Подтвердите пароль</label>\n            <input\n              style={\n                errors.confirmPassword\n                  ? { border: \"1px solid red\" }\n                  : { border: \"1px solid transparent\" }\n              }\n              type={confirmType ? \"password\" : \"text\"}\n              className={styles.formInput}\n              {...register(\"confirmPassword\", {\n                required: \"Пожалуйста подтвердите пароль\",\n                validate: {\n                  matchesPreviousPassword: (value) => {\n                    const { password } = getValues();\n                    return password === value || \"Пароли должны совпасть!\";\n                  },\n                },\n\n                minLength: 6,\n              })}\n            />\n            {errors.confirmPassword && (\n              <p className={styles.error}>{errors.confirmPassword.message}</p>\n            )}\n            <button\n              className={styles.showHide}\n              type=\"button\"\n              onClick={() => setConfirmType(!confirmType)}\n            >\n              {confirmType ? (\n                <Icon name={EIcons.hidePass} />\n              ) : (\n                <Icon name={EIcons.showPass} />\n              )}\n            </button>\n          </div>\n          <button type=\"submit\" className={styles.btn}>\n            Зарегистрироваться\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n"],"names":["Register","dispatch","useAppDispatch","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","passType","setPassType","_useState3","_useState4","confirmType","setConfirmType","_useAppSelector","useAppSelector","selectAuth","token","status","_useForm","useForm","mode","register","handleSubmit","getValues","errors","formState","useEffect","_jsx","className","styles","children","_jsxs","onSubmit","data","confirmPassword","meData","_objectWithoutProperties","_excluded","setMeData","localStorage","setItem","JSON","stringify","username","meAuthData","_excluded2","userRegister","htmlFor","_objectSpread","type","style","border","required","minLength","maxLength","validate","matchesTwoSymbol","value","message","email","pattern","password","onClick","Icon","name","EIcons","matchesPreviousPassword"],"sourceRoot":""}